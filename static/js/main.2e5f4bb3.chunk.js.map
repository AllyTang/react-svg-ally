{"version":3,"sources":["App.js","index.js"],"names":["validPlotType","App","useState","arr","setArr","str","setStr","color","setColor","className","width","height","xmlns","version","map","plot","index","params","type","trim","slice","includes","substring","split","key","x","y","style","fill","strokeWidth","stroke","cx","cy","r","points","name","id","cols","rows","onChange","e","target","value","placeholder","onClick","colors","item","Math","floor","random","length","forEach","alert","checkCommand","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEMA,G,KAAgB,CAAC,IAAK,IAAK,MAElB,SAASC,IAAO,IAAD,EACNC,mBAAS,IADH,mBACrBC,EADqB,KAChBC,EADgB,OAENF,mBAAS,IAFH,mBAErBG,EAFqB,KAEhBC,EAFgB,OAGFJ,mBAAS,QAHP,mBAGrBK,EAHqB,KAGdC,EAHc,KA+C5B,OACE,yBAAKC,UAAU,aACb,yBACEA,UAAU,SACVC,MAAM,QACNC,OAAO,QACPC,MAAM,6BACNC,QAAQ,OAEPV,GACCA,EAAIW,KAAI,SAACC,EAAMC,GACb,IAEIC,EAFEC,EAAOH,EAAKI,OAAOC,MAAM,EAAG,GAClC,GAAKpB,EAAcqB,SAASH,GAE5B,OAAQA,GACN,IAAK,IAGH,OAFAD,EAASF,EAAKO,UAAU,GAAGH,OAAOI,MAAM,KAGtC,0BACEC,IAAKR,EACLS,EAAGR,EAAO,GACVS,EAAGT,EAAO,GACVP,MAAOO,EAAO,GACdN,OAAQM,EAAO,GACfU,MAAO,CACLC,KAAM,CAAErB,SACRsB,YAAa,IACbC,OAAQ,gBAIhB,IAAK,IAGH,OAFAb,EAASF,EAAKO,UAAU,GAAGH,OAAOI,MAAM,KAGtC,4BACEC,IAAKR,EACLe,GAAId,EAAO,GACXe,GAAIf,EAAO,GACXgB,EAAGhB,EAAO,GACVa,OAAO,YACPD,YAAY,IACZD,KAAMrB,IAIZ,IAAK,IAGH,OAFAU,EAASF,EAAKO,UAAU,GAAGH,OAGzB,6BACEK,IAAKR,EACLkB,OAAQjB,EACRa,OAAO,YACPD,YAAY,IACZD,KAAMrB,SAQpB,8BACEE,UAAU,UACV0B,KAAK,GACLC,GAAG,GACHC,KAAK,KACLC,KAAK,KACLC,SAzEe,SAACC,GACpBlC,EAAOkC,EAAEC,OAAOC,QAyEZC,YAAY,uEAEd,4BAAQlC,UAAU,MAAMmC,QA5F5B,WACE,IAAMC,EAAS,CACb,OACA,OACA,SACA,MACA,SACA,SACA,SAEEC,EAAOD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SACpD1C,EAASsC,GACT,IAAM3C,EAAME,EAAIkB,MAAM,MACtBnB,EAAOD,GApCT,SAAsBA,GACpBA,EAAIgD,SAAQ,SAACpC,EAAMC,GACjB,IAAME,EAAOH,EAAKI,OAAOC,MAAM,EAAG,GAErB,MAATF,EAEoB,IADbH,EAAKO,UAAU,GAAGH,OAAOI,MAAM,KAC7B2B,QACTE,MAAM,sDAEU,MAATlC,EAGa,IAFbH,EAAKO,UAAU,GAAGH,OAAOI,MAAM,KAE7B2B,QACTE,MAAM,8CAEU,MAATlC,GAEwB,IADxBH,EAAKO,UAAU,GAAGH,OAChBI,MAAM,KAAK2B,QACpBE,MAAM,8DAmBZC,CAAalD,KA8EX,WCxHNmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.2e5f4bb3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './style/App.scss';\nconst validPlotType = ['r', 'c', 'p'];\n\nexport default function App() {\n  const [arr, setArr] = useState([]);\n  const [str, setStr] = useState('');\n  const [color, setColor] = useState('pink');\n\n  function checkCommand(arr) {\n    arr.forEach((plot, index) => {\n      const type = plot.trim().slice(0, 1);\n      let params;\n      if (type === 'r') {\n        params = plot.substring(1).trim().split(' ');\n        if (params.length !== 4) {\n          alert('Set rectangle parameter like this r 100 50 100 100');\n        }\n      } else if (type === 'c') {\n        params = plot.substring(1).trim().split(' ');\n\n        if (params.length !== 3) {\n          alert('Set circle command like this c 100 100 20 ');\n        }\n      } else if (type === 'p') {\n        params = plot.substring(1).trim();\n        if (params.split(' ').length !== 3) {\n          alert('Set polygon commands like this p 200,10 250,190 160,210');\n        }\n      }\n    });\n  }\n  function outPut() {\n    const colors = [\n      'blue',\n      'pink',\n      'yellow',\n      'red',\n      'purple',\n      'orange',\n      'green',\n    ];\n    let item = colors[Math.floor(Math.random() * colors.length)];\n    setColor(item);\n    const arr = str.split('\\n');\n    setArr(arr);\n    checkCommand(arr);\n  }\n  const handleChange = (e) => {\n    setStr(e.target.value);\n  };\n  return (\n    <div className='container'>\n      <svg\n        className='shapes'\n        width='250px'\n        height='250px'\n        xmlns='http://www.w3.org/2000/svg'\n        version='1.1'\n      >\n        {arr &&\n          arr.map((plot, index) => {\n            const type = plot.trim().slice(0, 1);\n            if (!validPlotType.includes(type)) return;\n            let params;\n            switch (type) {\n              case 'r':\n                params = plot.substring(1).trim().split(' ');\n\n                return (\n                  <rect\n                    key={index}\n                    x={params[0]}\n                    y={params[1]}\n                    width={params[2]}\n                    height={params[3]}\n                    style={{\n                      fill: { color },\n                      strokeWidth: '1',\n                      stroke: 'rgb(0,0,0)',\n                    }}\n                  />\n                );\n              case 'c':\n                params = plot.substring(1).trim().split(' ');\n\n                return (\n                  <circle\n                    key={index}\n                    cx={params[0]}\n                    cy={params[1]}\n                    r={params[2]}\n                    stroke='lightblue'\n                    strokeWidth='2'\n                    fill={color}\n                  />\n                );\n\n              case 'p':\n                params = plot.substring(1).trim();\n\n                return (\n                  <polygon\n                    key={index}\n                    points={params}\n                    stroke='lightblue'\n                    strokeWidth='2'\n                    fill={color}\n                  />\n                );\n              default:\n                break;\n            }\n          })}\n      </svg>\n      <textarea\n        className='command'\n        name=''\n        id=''\n        cols='30'\n        rows='10'\n        onChange={handleChange}\n        placeholder='Example&#10;p 200,10 250,190 160,210&#10;c 125 125 125&#10;r 100 50 120 120'\n      ></textarea>\n      <button className='btn' onClick={outPut}>\n        render\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}