{"version":3,"sources":["App.js","index.js"],"names":["validPlotType","App","useState","arr","setArr","str","setStr","color","setColor","className","map","plot","index","params","type","trim","slice","includes","substring","split","length","alert","width","height","xmlns","version","key","x","y","style","fill","strokeWidth","stroke","cx","cy","r","points","name","id","cols","rows","onChange","e","target","value","placeholder","onClick","colors","item","Math","floor","random","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEMA,G,KAAgB,CAAC,IAAK,IAAK,MAElB,SAASC,IAAO,IAAD,EACNC,mBAAS,IADH,mBACrBC,EADqB,KAChBC,EADgB,OAENF,mBAAS,IAFH,mBAErBG,EAFqB,KAEhBC,EAFgB,OAGFJ,mBAAS,QAHP,mBAGrBK,EAHqB,KAGdC,EAHc,KAwB5B,OACE,yBAAKC,UAAU,aACb,6BACGN,EAAIO,KAAI,SAACC,EAAMC,GACd,IAEIC,EAFEC,EAAOH,EAAKI,OAAOC,MAAM,EAAG,GAClC,GAAKhB,EAAciB,SAASH,GAE5B,OAAQA,GACN,IAAK,IAEH,GAAsB,KADtBD,EAASF,EAAKO,UAAU,GAAGH,OAAOI,MAAM,MAC7BC,OAAc,CACvBC,MAAM,sDACN,MAEF,OACE,yBACEZ,UAAU,SACVa,MAAM,QACNC,OAAO,QACPC,MAAM,6BACNC,QAAQ,MACRC,IAAKd,GAEL,0BACEe,EAAGd,EAAO,GACVe,EAAGf,EAAO,GACVS,MAAOT,EAAO,GACdU,OAAQV,EAAO,GACfgB,MAAO,CACLC,KAAM,CAAEvB,SACRwB,YAAa,IACbC,OAAQ,iBAKlB,IAAK,IAEH,GAAsB,KADtBnB,EAASF,EAAKO,UAAU,GAAGH,OAAOI,MAAM,MAC7BC,OAAc,CACvBC,MAAM,8CACN,MAEF,OACE,yBACEZ,UAAU,SACVa,MAAM,QACNC,OAAO,QACPC,MAAM,6BACNC,QAAQ,MACRC,IAAKd,GAEL,4BACEqB,GAAIpB,EAAO,GACXqB,GAAIrB,EAAO,GACXsB,EAAGtB,EAAO,GACVmB,OAAO,YACPD,YAAY,IACZD,KAAMvB,KAKd,IAAK,IAEH,GAAiC,KADjCM,EAASF,EAAKO,UAAU,GAAGH,QAChBI,MAAM,KAAKC,OAAc,CAClCC,MACE,2DAEF,MAEF,OACE,yBACEZ,UAAU,SACVa,MAAM,QACNC,OAAO,QACPC,MAAM,6BACNC,QAAQ,MACRC,IAAKd,GAEL,6BACEwB,OAAQvB,EACRmB,OAAO,YACPD,YAAY,IACZD,KAAMvB,UASpB,8BACEE,UAAU,UACV4B,KAAK,GACLC,GAAG,GACHC,KAAK,KACLC,KAAK,KACLC,SArGe,SAACC,GACpBpC,EAAOoC,EAAEC,OAAOC,QAqGZC,YAAY,uEAEd,4BAAQpC,UAAU,MAAMqC,QAxH5B,WACE,IAAMC,EAAS,CACb,OACA,OACA,SACA,MACA,SACA,SACA,SAEEC,EAAOD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAO3B,SACpDZ,EAASwC,GACT,IAAM7C,EAAME,EAAIc,MAAM,MACtBf,EAAOD,GACPiD,QAAQC,IAAIlD,KA0GV,WC7HNmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.4f067bd7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nconst validPlotType = ['r', 'c', 'p'];\n\nexport default function App() {\n  const [arr, setArr] = useState([]);\n  const [str, setStr] = useState('');\n  const [color, setColor] = useState('pink');\n\n  function render() {\n    const colors = [\n      'blue',\n      'pink',\n      'yellow',\n      'red',\n      'purple',\n      'orange',\n      'green',\n    ];\n    let item = colors[Math.floor(Math.random() * colors.length)];\n    setColor(item);\n    const arr = str.split('\\n');\n    setArr(arr);\n    console.log(arr);\n  }\n  const handleChange = (e) => {\n    setStr(e.target.value);\n  };\n  return (\n    <div className='container'>\n      <div>\n        {arr.map((plot, index) => {\n          const type = plot.trim().slice(0, 1);\n          if (!validPlotType.includes(type)) return;\n          let params;\n          switch (type) {\n            case 'r':\n              params = plot.substring(1).trim().split(' ');\n              if (params.length !== 4) {\n                alert('Set rectangle parameter like this r 100 50 100 100');\n                break;\n              }\n              return (\n                <svg\n                  className='shapes'\n                  width='250px'\n                  height='250px'\n                  xmlns='http://www.w3.org/2000/svg'\n                  version='1.1'\n                  key={index}\n                >\n                  <rect\n                    x={params[0]}\n                    y={params[1]}\n                    width={params[2]}\n                    height={params[3]}\n                    style={{\n                      fill: { color },\n                      strokeWidth: '1',\n                      stroke: 'rgb(0,0,0)',\n                    }}\n                  />\n                </svg>\n              );\n            case 'c':\n              params = plot.substring(1).trim().split(' ');\n              if (params.length !== 3) {\n                alert('Set circle command like this c 100 100 20 ');\n                break;\n              }\n              return (\n                <svg\n                  className='shapes'\n                  width='250px'\n                  height='250px'\n                  xmlns='http://www.w3.org/2000/svg'\n                  version='1.1'\n                  key={index}\n                >\n                  <circle\n                    cx={params[0]}\n                    cy={params[1]}\n                    r={params[2]}\n                    stroke='lightblue'\n                    strokeWidth='2'\n                    fill={color}\n                  />\n                </svg>\n              );\n\n            case 'p':\n              params = plot.substring(1).trim();\n              if (params.split(' ').length !== 3) {\n                alert(\n                  'Set polygon commands like this p 200,10 250,190 160,210'\n                );\n                break;\n              }\n              return (\n                <svg\n                  className='shapes'\n                  width='250px'\n                  height='250px'\n                  xmlns='http://www.w3.org/2000/svg'\n                  version='1.1'\n                  key={index}\n                >\n                  <polygon\n                    points={params}\n                    stroke='lightblue'\n                    strokeWidth='2'\n                    fill={color}\n                  />\n                </svg>\n              );\n            default:\n              break;\n          }\n        })}\n      </div>\n      <textarea\n        className='command'\n        name=''\n        id=''\n        cols='30'\n        rows='10'\n        onChange={handleChange}\n        placeholder='Example&#10;p 200,10 250,190 160,210&#10;c 125 125 125&#10;r 100 50 120 120'\n      ></textarea>\n      <button className='btn' onClick={render}>\n        render\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}